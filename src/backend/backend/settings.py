"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import boto3

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-e!x1cd#2hxpe=vbnc56!3ly2@=0l-6l4vv#c=yr2-b%7tva5$*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get('ENV') != 'production')

ALLOWED_HOSTS = [
    'localhost',
]

if os.environ.get('ENV') == 'staging':
    ALLOWED_HOSTS.append('api.staging.1234.shareyourwiz.com')
elif os.environ.get('ENV') == 'production':
    ALLOWED_HOSTS.append('api.shareyourwiz.com')


AUTH_USER_MODEL = 'login.User'

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'storages',
    'rest_framework',
    'login',
    'marketplace',
    'payment',
    'chat',
    'meeting_note',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if 'RDS_HOSTNAME' in os.environ:

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


# logger_boto3_session = Session(
#     aws_access_key_id=AWS_ACCESS_KEY_ID,
#     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#     region_name='us-west-2',
# )

# boto3_logs_client = boto3.client('logs', region_name='us-west-2')

LOGGING = {
    'version': 1,
    "disable_existing_loggers": False,
    "formatters": {
        "aws": {
            "format": '%(levelname)s - %(pathname)s \n %(funcName)s:%(lineno)s \n %(message)s',
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "watchtower": {
            "level": "ERROR",
            "class": "watchtower.CloudWatchLogHandler",
            # From step 2
            # "boto3_client": boto3_logs_client,
            "log_group_name": "Django_logs",
            # Different stream for each environment
            "log_stream_name": os.environ.get('ENV', 'localhost'),
            "formatter": "aws",
        },
        "console": {"class": "logging.StreamHandler", "formatter": "aws", },
    },
    "loggers": {
        # Use this logger to send data just to Cloudwatch
        "watchtower": {"level": "ERROR", "handlers": ["watchtower"], "propogate": True, }
    },
}

# if True:
# aws settings

if os.environ.get('ENV') == 'production':
    AWS_STORAGE_BUCKET_NAME = 'shareyourwiz-media-prod'
else:
    AWS_STORAGE_BUCKET_NAME = 'shareyourwiz-media'
AWS_S3_REGION_NAME = 'us-west-2'
AWS_S3_CUSTOM_DOMAIN = '{}.s3.amazonaws.com'.format(
    AWS_STORAGE_BUCKET_NAME
)
DEFAULT_FILE_STORAGE = 'backend.storage_backends.MediaStorage'
STATIC_URL = '/static/'
STATIC_ROOT = 'static'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# else:
#     STATIC_URL = '/static/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'frontend', "build", "static"),
# )


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if os.environ.get('ENV') == 'staging':
    CORS_ORIGIN_WHITELIST = [
        'http://localhost:3000',
        'https://staging.1234.shareyourwiz.com',
    ]
elif os.environ.get('ENV') == 'production':
    CORS_ORIGIN_WHITELIST = [
        'https://www.shareyourwiz.com',
    ]
else:
    CORS_ORIGIN_WHITELIST = [
        'http://localhost:3000',
    ]


REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'marketplace.pagination.Pagination',
    'PAGE_SIZE': 30
}

ASGI_APPLICATION = "backend.asgi.application"

REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, 6379)],
        },
    },
}
